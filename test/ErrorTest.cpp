#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

#include <CppErr/Error.h>

using namespace cpperr;

TEST_CASE("Error tests", "[CppErr]") {
    Error err;

    REQUIRE(!err.hasErrors());

    SECTION("Adding an errormessage to an error must increase the stack size by 1 and the errormessage must be the element on top of the stack.") {
        const std::string msg1 = "msg1", msg2 = "msg2";

        err.add(msg1);
        REQUIRE(err.hasErrors());
        REQUIRE(err.stack().size() == 1);

        err.add(msg2);
        REQUIRE(err.stack().size() == 2);
        REQUIRE(err.last().message() == msg2);

        SECTION("Clearing the error must remove all elements of the stack.") {
            err.clear();
            REQUIRE(!err.hasErrors());
            REQUIRE(err.stack().empty());
        }

        SECTION("Adding an error to another err << err2 must add err2 stack on top of err stack.") {
            Error err2;

            const std::string msg3 = "msg3";

            err2.add(msg3);
            err << err2;

            REQUIRE(err.stack().size() == 3);
            REQUIRE(err.last().message() == msg3);
            REQUIRE(err.stack()[0].message() == msg1);
            REQUIRE(err.stack()[1].message() == msg2);
        }
    }

    SECTION("Concatenation of multiple non empty errors must increase the stack.") {
        cpperr::Error err1, err2;

        err1 << "An error.";
        err2 << "Another error.";

        err << err1 << err2;

        REQUIRE(err.stack().size() == 2);
        REQUIRE(err.stack()[0].message() == "An error.");
        REQUIRE(err.stack()[1].message() == "Another error.");
    }

    ERR_ADD(err, "An error"); const int lineNumber = __LINE__;

    SECTION("Adding error message using a macro must add filename and line of where the error happened.") {
        REQUIRE(err.last().line() == lineNumber);
        REQUIRE(err.last().fileName() == __FILE__);
    }

    SECTION("A default error message must be of ErrorType cpperr:GenericError.") {
        REQUIRE(err.last().is<GenericError>());
    }

    SECTION("An error message can be added using a custom ErrorMessage.") {
        ERR_ADD(err, GenericError::defaultError("A custom message generated by generic error."));
        REQUIRE(err.last().message() == "A custom message generated by generic error.");
    }

    SECTION("Adding error message to cpperr::_ must not increase its stack size.") {
        cpperr::_.add("A message");
        REQUIRE(!cpperr::_.hasErrors());
    }
}
